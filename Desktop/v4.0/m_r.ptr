arrays.h:		if (X.d->m_N!=m_N) q->allocate(X.d->m_N);
arrays.h:			q->ptr[i]=X.d->q->ptr[i];
arrays.h:	d->q=this;
arrays.h:	d->m_N=0;
arrays.h:	d->q=this;
arrays.h:	d->m_N=0;
arrays.h:	d->copy_from(X);
arrays.h:	d->copy_from(X);
arrays.h:	d->m_N=0;
arrays.h:		d->m_N=N;
arrays.h:	for (long i=0; i<d->m_N; i++) ptr[i]=val;
arrays.h:	return d->m_N;
arrays.h:		m_N1=X.d->m_N1;
arrays.h:		m_N2=X.d->m_N2;
arrays.h:		m_N3=X.d->m_N3;
arrays.h:		m_N4=X.d->m_N4;
arrays.h:		m_N1N2=X.d->m_N1N2;
arrays.h:		m_N1N2N3=X.d->m_N1N2N3;
arrays.h:		m_data=X.d->m_data;
arrays.h:	d->q=this;
arrays.h:	d->m_N1=d->m_N2=d->m_N3=d->m_N4=0;
arrays.h:	d->m_N1N2=0;
arrays.h:	d->m_N1N2N3=0;
arrays.h:	d->q=this;
arrays.h:	d->m_N1=d->m_N2=d->m_N3=d->m_N4=0;
arrays.h:	d->m_N1N2=0;
arrays.h:	d->m_N1N2N3=0;
arrays.h:	d->copy_from(X);
arrays.h:	d->copy_from(X);
arrays.h:	d->m_N1=N1;
arrays.h:	d->m_N2=N2;
arrays.h:	d->m_N3=N3;
arrays.h:	d->m_N4=N4;
arrays.h:	d->m_N1N2=d->m_N1*d->m_N2;
arrays.h:	d->m_N1N2N3=d->m_N1*d->m_N2*d->m_N3;
arrays.h:	d->m_data.allocate(N1*N2*N3*N4);
arrays.h:	if ((i1<0)||(i1>=d->m_N1)) return 0;
arrays.h:	if ((i2<0)||(i2>=d->m_N2)) return 0;
arrays.h:	if ((i3<0)||(i3>=d->m_N3)) return 0;
arrays.h:	if ((i4<0)||(i4>=d->m_N4)) return 0;
arrays.h:	T ret=d->m_data.ptr[i1+d->m_N1*i2+d->m_N1N2*i3+d->m_N1N2N3*i4];
arrays.h:	T ret=d->m_data.ptr[i];
arrays.h:	if ((i1<0)||(i1>=d->m_N1)) return;
arrays.h:	if ((i2<0)||(i2>=d->m_N2)) return;
arrays.h:	if ((i3<0)||(i3>=d->m_N3)) return;
arrays.h:	if ((i4<0)||(i4>=d->m_N4)) return;
arrays.h:	d->m_data.ptr[i1+d->m_N1*i2+d->m_N1N2*i3+d->m_N1N2N3*i4]=val;
arrays.h:	d->m_data.ptr[i]=val;
arrays.h:	d->m_data.setAll(val);
arrays.h:	return d->m_N1;
arrays.h:	return d->m_N2;
arrays.h:	return d->m_N3;
arrays.h:	return d->m_N4;
arrays.h:	d->m_data.clear();
arrays.h:	d->m_N1=d->m_N2=d->m_N3=d->m_N4=0;
arrays.h:	d->m_N1N2=0;
arrays.h:	d->m_N1N2N3=0;
arrays.h:	return d->m_data.length();
Binary file box1.Z0.displacement.mda matches
Binary file box1.Z0.energy.keep.mda matches
Binary file box1.Z0.force.mda matches
box1.Z0.timerlog.txt:step_A_inner_products-thread-block1:	0.24
box1.Z0.timerlog.txt:step_A_inner_products-thread-block10:	0.182
box1.Z0.timerlog.txt:step_A_inner_products-thread-block11:	0.182
box1.Z0.timerlog.txt:step_A_inner_products-thread-block12:	0.175
box1.Z0.timerlog.txt:step_A_inner_products-thread-block13:	0.178
box1.Z0.timerlog.txt:step_A_inner_products-thread-block14:	0.177
box1.Z0.timerlog.txt:step_A_inner_products-thread-block15:	0.183
box1.Z0.timerlog.txt:step_A_inner_products-thread-block16:	0.191
box1.Z0.timerlog.txt:step_A_inner_products-thread-block17:	0.14
box1.Z0.timerlog.txt:step_A_inner_products-thread-block18:	0.146
box1.Z0.timerlog.txt:step_A_inner_products-thread-block19:	0.144
box1.Z0.timerlog.txt:step_A_inner_products-thread-block2:	0.251
box1.Z0.timerlog.txt:step_A_inner_products-thread-block20:	0.148
box1.Z0.timerlog.txt:step_A_inner_products-thread-block21:	0.148
box1.Z0.timerlog.txt:step_A_inner_products-thread-block22:	0.151
box1.Z0.timerlog.txt:step_A_inner_products-thread-block23:	0.154
box1.Z0.timerlog.txt:step_A_inner_products-thread-block24:	0.154
box1.Z0.timerlog.txt:step_A_inner_products-thread-block25:	0.133
box1.Z0.timerlog.txt:step_A_inner_products-thread-block26:	0.146
box1.Z0.timerlog.txt:step_A_inner_products-thread-block27:	0.144
box1.Z0.timerlog.txt:step_A_inner_products-thread-block28:	0.14
box1.Z0.timerlog.txt:step_A_inner_products-thread-block29:	0.148
box1.Z0.timerlog.txt:step_A_inner_products-thread-block3:	0.256
box1.Z0.timerlog.txt:step_A_inner_products-thread-block30:	0.143
box1.Z0.timerlog.txt:step_A_inner_products-thread-block31:	0.154
box1.Z0.timerlog.txt:step_A_inner_products-thread-block32:	0.156
box1.Z0.timerlog.txt:step_A_inner_products-thread-block33:	0.063
box1.Z0.timerlog.txt:step_A_inner_products-thread-block34:	0.067
box1.Z0.timerlog.txt:step_A_inner_products-thread-block35:	0.067
box1.Z0.timerlog.txt:step_A_inner_products-thread-block36:	0.067
box1.Z0.timerlog.txt:step_A_inner_products-thread-block37:	0.069
box1.Z0.timerlog.txt:step_A_inner_products-thread-block38:	0.066
box1.Z0.timerlog.txt:step_A_inner_products-thread-block39:	0.068
box1.Z0.timerlog.txt:step_A_inner_products-thread-block4:	0.255
box1.Z0.timerlog.txt:step_A_inner_products-thread-block40:	0.065
box1.Z0.timerlog.txt:step_A_inner_products-thread-block41:	0.111
box1.Z0.timerlog.txt:step_A_inner_products-thread-block42:	0.12
box1.Z0.timerlog.txt:step_A_inner_products-thread-block43:	0.123
box1.Z0.timerlog.txt:step_A_inner_products-thread-block44:	0.119
box1.Z0.timerlog.txt:step_A_inner_products-thread-block45:	0.122
box1.Z0.timerlog.txt:step_A_inner_products-thread-block46:	0.122
box1.Z0.timerlog.txt:step_A_inner_products-thread-block47:	0.12
box1.Z0.timerlog.txt:step_A_inner_products-thread-block48:	0.116
box1.Z0.timerlog.txt:step_A_inner_products-thread-block49:	0.091
box1.Z0.timerlog.txt:step_A_inner_products-thread-block5:	0.253
box1.Z0.timerlog.txt:step_A_inner_products-thread-block50:	0.104
box1.Z0.timerlog.txt:step_A_inner_products-thread-block51:	0.096
box1.Z0.timerlog.txt:step_A_inner_products-thread-block52:	0.097
box1.Z0.timerlog.txt:step_A_inner_products-thread-block53:	0.095
box1.Z0.timerlog.txt:step_A_inner_products-thread-block54:	0.1
box1.Z0.timerlog.txt:step_A_inner_products-thread-block55:	0.101
box1.Z0.timerlog.txt:step_A_inner_products-thread-block56:	0.108
box1.Z0.timerlog.txt:step_A_inner_products-thread-block57:	0.097
box1.Z0.timerlog.txt:step_A_inner_products-thread-block58:	0.102
box1.Z0.timerlog.txt:step_A_inner_products-thread-block59:	0.105
box1.Z0.timerlog.txt:step_A_inner_products-thread-block6:	0.263
box1.Z0.timerlog.txt:step_A_inner_products-thread-block60:	0.107
box1.Z0.timerlog.txt:step_A_inner_products-thread-block61:	0.108
box1.Z0.timerlog.txt:step_A_inner_products-thread-block62:	0.106
box1.Z0.timerlog.txt:step_A_inner_products-thread-block63:	0.106
box1.Z0.timerlog.txt:step_A_inner_products-thread-block64:	0.106
box1.Z0.timerlog.txt:step_A_inner_products-thread-block65:	0.091
box1.Z0.timerlog.txt:step_A_inner_products-thread-block66:	0.098
box1.Z0.timerlog.txt:step_A_inner_products-thread-block67:	0.097
box1.Z0.timerlog.txt:step_A_inner_products-thread-block68:	0.101
box1.Z0.timerlog.txt:step_A_inner_products-thread-block69:	0.104
box1.Z0.timerlog.txt:step_A_inner_products-thread-block7:	0.268
box1.Z0.timerlog.txt:step_A_inner_products-thread-block70:	0.096
box1.Z0.timerlog.txt:step_A_inner_products-thread-block71:	0.103
box1.Z0.timerlog.txt:step_A_inner_products-thread-block72:	0.104
box1.Z0.timerlog.txt:step_A_inner_products-thread-block73:	0.096
box1.Z0.timerlog.txt:step_A_inner_products-thread-block74:	0.102
box1.Z0.timerlog.txt:step_A_inner_products-thread-block75:	0.105
box1.Z0.timerlog.txt:step_A_inner_products-thread-block76:	0.111
box1.Z0.timerlog.txt:step_A_inner_products-thread-block77:	0.106
box1.Z0.timerlog.txt:step_A_inner_products-thread-block78:	0.103
box1.Z0.timerlog.txt:step_A_inner_products-thread-block79:	0.118
box1.Z0.timerlog.txt:step_A_inner_products-thread-block8:	0.264
box1.Z0.timerlog.txt:step_A_inner_products-thread-block80:	0.107
box1.Z0.timerlog.txt:step_A_inner_products-thread-block9:	0.167
box1.Z0.timerlog.txt:step_A_multipy_by_A-thread-block1:	3.587
box1.Z0.timerlog.txt:step_A_multipy_by_A-thread-block10:	2.591
box1.Z0.timerlog.txt:step_A_multipy_by_A-thread-block11:	2.622
box1.Z0.timerlog.txt:step_A_multipy_by_A-thread-block12:	2.624
box1.Z0.timerlog.txt:step_A_multipy_by_A-thread-block13:	2.601
box1.Z0.timerlog.txt:step_A_multipy_by_A-thread-block14:	2.893
box1.Z0.timerlog.txt:step_A_multipy_by_A-thread-block15:	3.287
box1.Z0.timerlog.txt:step_A_multipy_by_A-thread-block16:	3.34
box1.Z0.timerlog.txt:step_A_multipy_by_A-thread-block17:	2.06
box1.Z0.timerlog.txt:step_A_multipy_by_A-thread-block18:	2.193
box1.Z0.timerlog.txt:step_A_multipy_by_A-thread-block19:	2.196
box1.Z0.timerlog.txt:step_A_multipy_by_A-thread-block2:	3.775
box1.Z0.timerlog.txt:step_A_multipy_by_A-thread-block20:	2.237
box1.Z0.timerlog.txt:step_A_multipy_by_A-thread-block21:	2.211
box1.Z0.timerlog.txt:step_A_multipy_by_A-thread-block22:	2.419
box1.Z0.timerlog.txt:step_A_multipy_by_A-thread-block23:	2.712
box1.Z0.timerlog.txt:step_A_multipy_by_A-thread-block24:	2.703
box1.Z0.timerlog.txt:step_A_multipy_by_A-thread-block25:	1.999
box1.Z0.timerlog.txt:step_A_multipy_by_A-thread-block26:	2.242
box1.Z0.timerlog.txt:step_A_multipy_by_A-thread-block27:	2.128
box1.Z0.timerlog.txt:step_A_multipy_by_A-thread-block28:	2.168
box1.Z0.timerlog.txt:step_A_multipy_by_A-thread-block29:	2.132
box1.Z0.timerlog.txt:step_A_multipy_by_A-thread-block3:	3.735
box1.Z0.timerlog.txt:step_A_multipy_by_A-thread-block30:	2.153
box1.Z0.timerlog.txt:step_A_multipy_by_A-thread-block31:	2.645
box1.Z0.timerlog.txt:step_A_multipy_by_A-thread-block32:	2.689
box1.Z0.timerlog.txt:step_A_multipy_by_A-thread-block33:	0.946
box1.Z0.timerlog.txt:step_A_multipy_by_A-thread-block34:	1.006
box1.Z0.timerlog.txt:step_A_multipy_by_A-thread-block35:	0.971
box1.Z0.timerlog.txt:step_A_multipy_by_A-thread-block36:	1.006
box1.Z0.timerlog.txt:step_A_multipy_by_A-thread-block37:	1.044
box1.Z0.timerlog.txt:step_A_multipy_by_A-thread-block38:	1.004
box1.Z0.timerlog.txt:step_A_multipy_by_A-thread-block39:	1.194
box1.Z0.timerlog.txt:step_A_multipy_by_A-thread-block4:	3.758
box1.Z0.timerlog.txt:step_A_multipy_by_A-thread-block40:	1.28
box1.Z0.timerlog.txt:step_A_multipy_by_A-thread-block41:	1.62
box1.Z0.timerlog.txt:step_A_multipy_by_A-thread-block42:	1.762
box1.Z0.timerlog.txt:step_A_multipy_by_A-thread-block43:	1.756
box1.Z0.timerlog.txt:step_A_multipy_by_A-thread-block44:	1.831
box1.Z0.timerlog.txt:step_A_multipy_by_A-thread-block45:	1.768
box1.Z0.timerlog.txt:step_A_multipy_by_A-thread-block46:	1.87
box1.Z0.timerlog.txt:step_A_multipy_by_A-thread-block47:	2.227
box1.Z0.timerlog.txt:step_A_multipy_by_A-thread-block48:	2.239
box1.Z0.timerlog.txt:step_A_multipy_by_A-thread-block49:	1.353
box1.Z0.timerlog.txt:step_A_multipy_by_A-thread-block5:	3.814
box1.Z0.timerlog.txt:step_A_multipy_by_A-thread-block50:	1.448
box1.Z0.timerlog.txt:step_A_multipy_by_A-thread-block51:	1.404
box1.Z0.timerlog.txt:step_A_multipy_by_A-thread-block52:	1.447
box1.Z0.timerlog.txt:step_A_multipy_by_A-thread-block53:	1.444
box1.Z0.timerlog.txt:step_A_multipy_by_A-thread-block54:	1.591
box1.Z0.timerlog.txt:step_A_multipy_by_A-thread-block55:	1.802
box1.Z0.timerlog.txt:step_A_multipy_by_A-thread-block56:	1.865
box1.Z0.timerlog.txt:step_A_multipy_by_A-thread-block57:	1.453
box1.Z0.timerlog.txt:step_A_multipy_by_A-thread-block58:	1.512
box1.Z0.timerlog.txt:step_A_multipy_by_A-thread-block59:	1.511
box1.Z0.timerlog.txt:step_A_multipy_by_A-thread-block6:	4.033
box1.Z0.timerlog.txt:step_A_multipy_by_A-thread-block60:	1.552
box1.Z0.timerlog.txt:step_A_multipy_by_A-thread-block61:	1.592
box1.Z0.timerlog.txt:step_A_multipy_by_A-thread-block62:	1.627
box1.Z0.timerlog.txt:step_A_multipy_by_A-thread-block63:	1.913
box1.Z0.timerlog.txt:step_A_multipy_by_A-thread-block64:	2.009
box1.Z0.timerlog.txt:step_A_multipy_by_A-thread-block65:	1.317
box1.Z0.timerlog.txt:step_A_multipy_by_A-thread-block66:	1.436
box1.Z0.timerlog.txt:step_A_multipy_by_A-thread-block67:	1.473
box1.Z0.timerlog.txt:step_A_multipy_by_A-thread-block68:	1.482
box1.Z0.timerlog.txt:step_A_multipy_by_A-thread-block69:	1.599
box1.Z0.timerlog.txt:step_A_multipy_by_A-thread-block7:	4.747
box1.Z0.timerlog.txt:step_A_multipy_by_A-thread-block70:	1.479
box1.Z0.timerlog.txt:step_A_multipy_by_A-thread-block71:	1.783
box1.Z0.timerlog.txt:step_A_multipy_by_A-thread-block72:	1.733
box1.Z0.timerlog.txt:step_A_multipy_by_A-thread-block73:	1.417
box1.Z0.timerlog.txt:step_A_multipy_by_A-thread-block74:	1.511
box1.Z0.timerlog.txt:step_A_multipy_by_A-thread-block75:	1.511
box1.Z0.timerlog.txt:step_A_multipy_by_A-thread-block76:	1.548
box1.Z0.timerlog.txt:step_A_multipy_by_A-thread-block77:	1.588
box1.Z0.timerlog.txt:step_A_multipy_by_A-thread-block78:	1.629
box1.Z0.timerlog.txt:step_A_multipy_by_A-thread-block79:	2.088
box1.Z0.timerlog.txt:step_A_multipy_by_A-thread-block8:	4.709
box1.Z0.timerlog.txt:step_A_multipy_by_A-thread-block80:	1.915
box1.Z0.timerlog.txt:step_A_multipy_by_A-thread-block9:	2.465
box1.Z0.timerlog.txt:step_B_compute_stress-thread-block1:	0.305
box1.Z0.timerlog.txt:step_B_compute_stress-thread-block10:	0.224
box1.Z0.timerlog.txt:step_B_compute_stress-thread-block11:	0.227
box1.Z0.timerlog.txt:step_B_compute_stress-thread-block12:	0.217
box1.Z0.timerlog.txt:step_B_compute_stress-thread-block13:	0.22
box1.Z0.timerlog.txt:step_B_compute_stress-thread-block14:	0.224
box1.Z0.timerlog.txt:step_B_compute_stress-thread-block15:	0.254
box1.Z0.timerlog.txt:step_B_compute_stress-thread-block16:	0.273
box1.Z0.timerlog.txt:step_B_compute_stress-thread-block17:	0.179
box1.Z0.timerlog.txt:step_B_compute_stress-thread-block18:	0.186
box1.Z0.timerlog.txt:step_B_compute_stress-thread-block19:	0.187
box1.Z0.timerlog.txt:step_B_compute_stress-thread-block2:	0.305
box1.Z0.timerlog.txt:step_B_compute_stress-thread-block20:	0.177
box1.Z0.timerlog.txt:step_B_compute_stress-thread-block21:	0.185
box1.Z0.timerlog.txt:step_B_compute_stress-thread-block22:	0.198
box1.Z0.timerlog.txt:step_B_compute_stress-thread-block23:	0.213
box1.Z0.timerlog.txt:step_B_compute_stress-thread-block24:	0.217
box1.Z0.timerlog.txt:step_B_compute_stress-thread-block25:	0.174
box1.Z0.timerlog.txt:step_B_compute_stress-thread-block26:	0.184
box1.Z0.timerlog.txt:step_B_compute_stress-thread-block27:	0.177
box1.Z0.timerlog.txt:step_B_compute_stress-thread-block28:	0.184
box1.Z0.timerlog.txt:step_B_compute_stress-thread-block29:	0.173
box1.Z0.timerlog.txt:step_B_compute_stress-thread-block3:	0.31
box1.Z0.timerlog.txt:step_B_compute_stress-thread-block30:	0.183
box1.Z0.timerlog.txt:step_B_compute_stress-thread-block31:	0.21
box1.Z0.timerlog.txt:step_B_compute_stress-thread-block32:	0.226
box1.Z0.timerlog.txt:step_B_compute_stress-thread-block33:	0.079
box1.Z0.timerlog.txt:step_B_compute_stress-thread-block34:	0.085
box1.Z0.timerlog.txt:step_B_compute_stress-thread-block35:	0.087
box1.Z0.timerlog.txt:step_B_compute_stress-thread-block36:	0.083
box1.Z0.timerlog.txt:step_B_compute_stress-thread-block37:	0.081
box1.Z0.timerlog.txt:step_B_compute_stress-thread-block38:	0.08
box1.Z0.timerlog.txt:step_B_compute_stress-thread-block39:	0.097
box1.Z0.timerlog.txt:step_B_compute_stress-thread-block4:	0.329
box1.Z0.timerlog.txt:step_B_compute_stress-thread-block40:	0.099
box1.Z0.timerlog.txt:step_B_compute_stress-thread-block41:	0.154
box1.Z0.timerlog.txt:step_B_compute_stress-thread-block42:	0.139
box1.Z0.timerlog.txt:step_B_compute_stress-thread-block43:	0.153
box1.Z0.timerlog.txt:step_B_compute_stress-thread-block44:	0.136
box1.Z0.timerlog.txt:step_B_compute_stress-thread-block45:	0.157
box1.Z0.timerlog.txt:step_B_compute_stress-thread-block46:	0.15
box1.Z0.timerlog.txt:step_B_compute_stress-thread-block47:	0.174
box1.Z0.timerlog.txt:step_B_compute_stress-thread-block48:	0.188
box1.Z0.timerlog.txt:step_B_compute_stress-thread-block49:	0.121
box1.Z0.timerlog.txt:step_B_compute_stress-thread-block5:	0.306
box1.Z0.timerlog.txt:step_B_compute_stress-thread-block50:	0.114
box1.Z0.timerlog.txt:step_B_compute_stress-thread-block51:	0.121
box1.Z0.timerlog.txt:step_B_compute_stress-thread-block52:	0.122
box1.Z0.timerlog.txt:step_B_compute_stress-thread-block53:	0.118
box1.Z0.timerlog.txt:step_B_compute_stress-thread-block54:	0.13
box1.Z0.timerlog.txt:step_B_compute_stress-thread-block55:	0.149
box1.Z0.timerlog.txt:step_B_compute_stress-thread-block56:	0.154
box1.Z0.timerlog.txt:step_B_compute_stress-thread-block57:	0.128
box1.Z0.timerlog.txt:step_B_compute_stress-thread-block58:	0.138
box1.Z0.timerlog.txt:step_B_compute_stress-thread-block59:	0.142
box1.Z0.timerlog.txt:step_B_compute_stress-thread-block6:	0.32
box1.Z0.timerlog.txt:step_B_compute_stress-thread-block60:	0.127
box1.Z0.timerlog.txt:step_B_compute_stress-thread-block61:	0.123
box1.Z0.timerlog.txt:step_B_compute_stress-thread-block62:	0.136
box1.Z0.timerlog.txt:step_B_compute_stress-thread-block63:	0.149
box1.Z0.timerlog.txt:step_B_compute_stress-thread-block64:	0.158
box1.Z0.timerlog.txt:step_B_compute_stress-thread-block65:	0.114
box1.Z0.timerlog.txt:step_B_compute_stress-thread-block66:	0.137
box1.Z0.timerlog.txt:step_B_compute_stress-thread-block67:	0.118
box1.Z0.timerlog.txt:step_B_compute_stress-thread-block68:	0.119
box1.Z0.timerlog.txt:step_B_compute_stress-thread-block69:	0.118
box1.Z0.timerlog.txt:step_B_compute_stress-thread-block7:	0.375
box1.Z0.timerlog.txt:step_B_compute_stress-thread-block70:	0.135
box1.Z0.timerlog.txt:step_B_compute_stress-thread-block71:	0.135
box1.Z0.timerlog.txt:step_B_compute_stress-thread-block72:	0.146
box1.Z0.timerlog.txt:step_B_compute_stress-thread-block73:	0.121
box1.Z0.timerlog.txt:step_B_compute_stress-thread-block74:	0.135
box1.Z0.timerlog.txt:step_B_compute_stress-thread-block75:	0.125
box1.Z0.timerlog.txt:step_B_compute_stress-thread-block76:	0.137
box1.Z0.timerlog.txt:step_B_compute_stress-thread-block77:	0.136
box1.Z0.timerlog.txt:step_B_compute_stress-thread-block78:	0.132
box1.Z0.timerlog.txt:step_B_compute_stress-thread-block79:	0.156
box1.Z0.timerlog.txt:step_B_compute_stress-thread-block8:	0.4
box1.Z0.timerlog.txt:step_B_compute_stress-thread-block80:	0.159
box1.Z0.timerlog.txt:step_B_compute_stress-thread-block9:	0.229
box1.Z0.timerlog.txt:step_B_p_inner_products-thread-block1:	0.056
box1.Z0.timerlog.txt:step_B_p_inner_products-thread-block10:	0.043
box1.Z0.timerlog.txt:step_B_p_inner_products-thread-block11:	0.051
box1.Z0.timerlog.txt:step_B_p_inner_products-thread-block12:	0.043
box1.Z0.timerlog.txt:step_B_p_inner_products-thread-block13:	0.05
box1.Z0.timerlog.txt:step_B_p_inner_products-thread-block14:	0.042
box1.Z0.timerlog.txt:step_B_p_inner_products-thread-block15:	0.058
box1.Z0.timerlog.txt:step_B_p_inner_products-thread-block16:	0.063
box1.Z0.timerlog.txt:step_B_p_inner_products-thread-block17:	0.034
box1.Z0.timerlog.txt:step_B_p_inner_products-thread-block18:	0.033
box1.Z0.timerlog.txt:step_B_p_inner_products-thread-block19:	0.036
box1.Z0.timerlog.txt:step_B_p_inner_products-thread-block2:	0.059
box1.Z0.timerlog.txt:step_B_p_inner_products-thread-block20:	0.032
box1.Z0.timerlog.txt:step_B_p_inner_products-thread-block21:	0.032
box1.Z0.timerlog.txt:step_B_p_inner_products-thread-block22:	0.046
box1.Z0.timerlog.txt:step_B_p_inner_products-thread-block23:	0.052
box1.Z0.timerlog.txt:step_B_p_inner_products-thread-block24:	0.052
box1.Z0.timerlog.txt:step_B_p_inner_products-thread-block25:	0.038
box1.Z0.timerlog.txt:step_B_p_inner_products-thread-block26:	0.038
box1.Z0.timerlog.txt:step_B_p_inner_products-thread-block27:	0.034
box1.Z0.timerlog.txt:step_B_p_inner_products-thread-block28:	0.041
box1.Z0.timerlog.txt:step_B_p_inner_products-thread-block29:	0.029
box1.Z0.timerlog.txt:step_B_p_inner_products-thread-block3:	0.063
box1.Z0.timerlog.txt:step_B_p_inner_products-thread-block30:	0.038
box1.Z0.timerlog.txt:step_B_p_inner_products-thread-block31:	0.049
box1.Z0.timerlog.txt:step_B_p_inner_products-thread-block32:	0.05
box1.Z0.timerlog.txt:step_B_p_inner_products-thread-block33:	0.016
box1.Z0.timerlog.txt:step_B_p_inner_products-thread-block34:	0.017
box1.Z0.timerlog.txt:step_B_p_inner_products-thread-block35:	0.016
box1.Z0.timerlog.txt:step_B_p_inner_products-thread-block36:	0.014
box1.Z0.timerlog.txt:step_B_p_inner_products-thread-block37:	0.014
box1.Z0.timerlog.txt:step_B_p_inner_products-thread-block38:	0.017
box1.Z0.timerlog.txt:step_B_p_inner_products-thread-block39:	0.026
box1.Z0.timerlog.txt:step_B_p_inner_products-thread-block4:	0.064
box1.Z0.timerlog.txt:step_B_p_inner_products-thread-block40:	0.023
box1.Z0.timerlog.txt:step_B_p_inner_products-thread-block41:	0.029
box1.Z0.timerlog.txt:step_B_p_inner_products-thread-block42:	0.03
box1.Z0.timerlog.txt:step_B_p_inner_products-thread-block43:	0.033
box1.Z0.timerlog.txt:step_B_p_inner_products-thread-block44:	0.027
box1.Z0.timerlog.txt:step_B_p_inner_products-thread-block45:	0.032
box1.Z0.timerlog.txt:step_B_p_inner_products-thread-block46:	0.032
box1.Z0.timerlog.txt:step_B_p_inner_products-thread-block47:	0.042
box1.Z0.timerlog.txt:step_B_p_inner_products-thread-block48:	0.048
box1.Z0.timerlog.txt:step_B_p_inner_products-thread-block49:	0.025
box1.Z0.timerlog.txt:step_B_p_inner_products-thread-block5:	0.058
box1.Z0.timerlog.txt:step_B_p_inner_products-thread-block50:	0.021
box1.Z0.timerlog.txt:step_B_p_inner_products-thread-block51:	0.022
box1.Z0.timerlog.txt:step_B_p_inner_products-thread-block52:	0.022
box1.Z0.timerlog.txt:step_B_p_inner_products-thread-block53:	0.024
box1.Z0.timerlog.txt:step_B_p_inner_products-thread-block54:	0.026
box1.Z0.timerlog.txt:step_B_p_inner_products-thread-block55:	0.034
box1.Z0.timerlog.txt:step_B_p_inner_products-thread-block56:	0.034
box1.Z0.timerlog.txt:step_B_p_inner_products-thread-block57:	0.025
box1.Z0.timerlog.txt:step_B_p_inner_products-thread-block58:	0.029
box1.Z0.timerlog.txt:step_B_p_inner_products-thread-block59:	0.026
box1.Z0.timerlog.txt:step_B_p_inner_products-thread-block6:	0.063
box1.Z0.timerlog.txt:step_B_p_inner_products-thread-block60:	0.025
box1.Z0.timerlog.txt:step_B_p_inner_products-thread-block61:	0.021
box1.Z0.timerlog.txt:step_B_p_inner_products-thread-block62:	0.026
box1.Z0.timerlog.txt:step_B_p_inner_products-thread-block63:	0.033
box1.Z0.timerlog.txt:step_B_p_inner_products-thread-block64:	0.038
box1.Z0.timerlog.txt:step_B_p_inner_products-thread-block65:	0.021
box1.Z0.timerlog.txt:step_B_p_inner_products-thread-block66:	0.029
box1.Z0.timerlog.txt:step_B_p_inner_products-thread-block67:	0.021
box1.Z0.timerlog.txt:step_B_p_inner_products-thread-block68:	0.024
box1.Z0.timerlog.txt:step_B_p_inner_products-thread-block69:	0.02
box1.Z0.timerlog.txt:step_B_p_inner_products-thread-block7:	0.088
box1.Z0.timerlog.txt:step_B_p_inner_products-thread-block70:	0.031
box1.Z0.timerlog.txt:step_B_p_inner_products-thread-block71:	0.028
box1.Z0.timerlog.txt:step_B_p_inner_products-thread-block72:	0.036
box1.Z0.timerlog.txt:step_B_p_inner_products-thread-block73:	0.023
box1.Z0.timerlog.txt:step_B_p_inner_products-thread-block74:	0.029
box1.Z0.timerlog.txt:step_B_p_inner_products-thread-block75:	0.022
box1.Z0.timerlog.txt:step_B_p_inner_products-thread-block76:	0.027
box1.Z0.timerlog.txt:step_B_p_inner_products-thread-block77:	0.025
box1.Z0.timerlog.txt:step_B_p_inner_products-thread-block78:	0.03
box1.Z0.timerlog.txt:step_B_p_inner_products-thread-block79:	0.036
box1.Z0.timerlog.txt:step_B_p_inner_products-thread-block8:	0.094
box1.Z0.timerlog.txt:step_B_p_inner_products-thread-block80:	0.038
box1.Z0.timerlog.txt:step_B_p_inner_products-thread-block9:	0.036
box1.Z0.timerlog.txt:step_B_p_on_inner_interface-thread-block1:	0.015
box1.Z0.timerlog.txt:step_B_p_on_inner_interface-thread-block10:	0.007
box1.Z0.timerlog.txt:step_B_p_on_inner_interface-thread-block11:	0.016
box1.Z0.timerlog.txt:step_B_p_on_inner_interface-thread-block12:	0.013
box1.Z0.timerlog.txt:step_B_p_on_inner_interface-thread-block13:	0.016
box1.Z0.timerlog.txt:step_B_p_on_inner_interface-thread-block14:	0.011
box1.Z0.timerlog.txt:step_B_p_on_inner_interface-thread-block15:	0.011
box1.Z0.timerlog.txt:step_B_p_on_inner_interface-thread-block16:	0.009
box1.Z0.timerlog.txt:step_B_p_on_inner_interface-thread-block17:	0.006
box1.Z0.timerlog.txt:step_B_p_on_inner_interface-thread-block18:	0.011
box1.Z0.timerlog.txt:step_B_p_on_inner_interface-thread-block19:	0.011
box1.Z0.timerlog.txt:step_B_p_on_inner_interface-thread-block2:	0.017
box1.Z0.timerlog.txt:step_B_p_on_inner_interface-thread-block20:	0.011
box1.Z0.timerlog.txt:step_B_p_on_inner_interface-thread-block21:	0.014
box1.Z0.timerlog.txt:step_B_p_on_inner_interface-thread-block22:	0.014
box1.Z0.timerlog.txt:step_B_p_on_inner_interface-thread-block23:	0.014
box1.Z0.timerlog.txt:step_B_p_on_inner_interface-thread-block24:	0.007
box1.Z0.timerlog.txt:step_B_p_on_inner_interface-thread-block25:	0.01
box1.Z0.timerlog.txt:step_B_p_on_inner_interface-thread-block26:	0.015
box1.Z0.timerlog.txt:step_B_p_on_inner_interface-thread-block27:	0.01
box1.Z0.timerlog.txt:step_B_p_on_inner_interface-thread-block28:	0.015
box1.Z0.timerlog.txt:step_B_p_on_inner_interface-thread-block29:	0.009
box1.Z0.timerlog.txt:step_B_p_on_inner_interface-thread-block3:	0.023
box1.Z0.timerlog.txt:step_B_p_on_inner_interface-thread-block30:	0.014
box1.Z0.timerlog.txt:step_B_p_on_inner_interface-thread-block31:	0.013
box1.Z0.timerlog.txt:step_B_p_on_inner_interface-thread-block32:	0.008
box1.Z0.timerlog.txt:step_B_p_on_inner_interface-thread-block33:	0.005
box1.Z0.timerlog.txt:step_B_p_on_inner_interface-thread-block34:	0.007
box1.Z0.timerlog.txt:step_B_p_on_inner_interface-thread-block35:	0.004
box1.Z0.timerlog.txt:step_B_p_on_inner_interface-thread-block36:	0.004
box1.Z0.timerlog.txt:step_B_p_on_inner_interface-thread-block37:	0.004
box1.Z0.timerlog.txt:step_B_p_on_inner_interface-thread-block38:	0.006
box1.Z0.timerlog.txt:step_B_p_on_inner_interface-thread-block39:	0.007
box1.Z0.timerlog.txt:step_B_p_on_inner_interface-thread-block4:	0.017
box1.Z0.timerlog.txt:step_B_p_on_inner_interface-thread-block40:	0.003
box1.Z0.timerlog.txt:step_B_p_on_inner_interface-thread-block41:	0.006
box1.Z0.timerlog.txt:step_B_p_on_inner_interface-thread-block42:	0.011
box1.Z0.timerlog.txt:step_B_p_on_inner_interface-thread-block43:	0.01
box1.Z0.timerlog.txt:step_B_p_on_inner_interface-thread-block44:	0.011
box1.Z0.timerlog.txt:step_B_p_on_inner_interface-thread-block45:	0.008
box1.Z0.timerlog.txt:step_B_p_on_inner_interface-thread-block46:	0.01
box1.Z0.timerlog.txt:step_B_p_on_inner_interface-thread-block47:	0.01
box1.Z0.timerlog.txt:step_B_p_on_inner_interface-thread-block48:	0.005
box1.Z0.timerlog.txt:step_B_p_on_inner_interface-thread-block49:	0.005
box1.Z0.timerlog.txt:step_B_p_on_inner_interface-thread-block5:	0.013
box1.Z0.timerlog.txt:step_B_p_on_inner_interface-thread-block50:	0.006
box1.Z0.timerlog.txt:step_B_p_on_inner_interface-thread-block51:	0.004
box1.Z0.timerlog.txt:step_B_p_on_inner_interface-thread-block52:	0.004
box1.Z0.timerlog.txt:step_B_p_on_inner_interface-thread-block53:	0.006
box1.Z0.timerlog.txt:step_B_p_on_inner_interface-thread-block54:	0.006
box1.Z0.timerlog.txt:step_B_p_on_inner_interface-thread-block55:	0.007
box1.Z0.timerlog.txt:step_B_p_on_inner_interface-thread-block56:	0.007
box1.Z0.timerlog.txt:step_B_p_on_inner_interface-thread-block57:	0.006
box1.Z0.timerlog.txt:step_B_p_on_inner_interface-thread-block58:	0.009
box1.Z0.timerlog.txt:step_B_p_on_inner_interface-thread-block59:	0.004
box1.Z0.timerlog.txt:step_B_p_on_inner_interface-thread-block6:	0.015
box1.Z0.timerlog.txt:step_B_p_on_inner_interface-thread-block60:	0.01
box1.Z0.timerlog.txt:step_B_p_on_inner_interface-thread-block61:	0.007
box1.Z0.timerlog.txt:step_B_p_on_inner_interface-thread-block62:	0.009
box1.Z0.timerlog.txt:step_B_p_on_inner_interface-thread-block63:	0.005
box1.Z0.timerlog.txt:step_B_p_on_inner_interface-thread-block64:	0.004
box1.Z0.timerlog.txt:step_B_p_on_inner_interface-thread-block65:	0.005
box1.Z0.timerlog.txt:step_B_p_on_inner_interface-thread-block66:	0.009
box1.Z0.timerlog.txt:step_B_p_on_inner_interface-thread-block67:	0.005
box1.Z0.timerlog.txt:step_B_p_on_inner_interface-thread-block68:	0.01
box1.Z0.timerlog.txt:step_B_p_on_inner_interface-thread-block69:	0.006
box1.Z0.timerlog.txt:step_B_p_on_inner_interface-thread-block7:	0.019
box1.Z0.timerlog.txt:step_B_p_on_inner_interface-thread-block70:	0.008
box1.Z0.timerlog.txt:step_B_p_on_inner_interface-thread-block71:	0.006
box1.Z0.timerlog.txt:step_B_p_on_inner_interface-thread-block72:	0.009
box1.Z0.timerlog.txt:step_B_p_on_inner_interface-thread-block73:	0.008
box1.Z0.timerlog.txt:step_B_p_on_inner_interface-thread-block74:	0.01
box1.Z0.timerlog.txt:step_B_p_on_inner_interface-thread-block75:	0.01
box1.Z0.timerlog.txt:step_B_p_on_inner_interface-thread-block76:	0.007
box1.Z0.timerlog.txt:step_B_p_on_inner_interface-thread-block77:	0.009
box1.Z0.timerlog.txt:step_B_p_on_inner_interface-thread-block78:	0.013
box1.Z0.timerlog.txt:step_B_p_on_inner_interface-thread-block79:	0.011
box1.Z0.timerlog.txt:step_B_p_on_inner_interface-thread-block8:	0.02
box1.Z0.timerlog.txt:step_B_p_on_inner_interface-thread-block80:	0.007
box1.Z0.timerlog.txt:step_B_p_on_inner_interface-thread-block9:	0.008
box1.Z0.timerlog.txt:step_B_update_p-thread-block1:	0.142
box1.Z0.timerlog.txt:step_B_update_p-thread-block10:	0.113
box1.Z0.timerlog.txt:step_B_update_p-thread-block11:	0.117
box1.Z0.timerlog.txt:step_B_update_p-thread-block12:	0.11
box1.Z0.timerlog.txt:step_B_update_p-thread-block13:	0.122
box1.Z0.timerlog.txt:step_B_update_p-thread-block14:	0.123
box1.Z0.timerlog.txt:step_B_update_p-thread-block15:	0.156
box1.Z0.timerlog.txt:step_B_update_p-thread-block16:	0.159
box1.Z0.timerlog.txt:step_B_update_p-thread-block17:	0.082
box1.Z0.timerlog.txt:step_B_update_p-thread-block18:	0.097
box1.Z0.timerlog.txt:step_B_update_p-thread-block19:	0.101
box1.Z0.timerlog.txt:step_B_update_p-thread-block2:	0.153
box1.Z0.timerlog.txt:step_B_update_p-thread-block20:	0.086
box1.Z0.timerlog.txt:step_B_update_p-thread-block21:	0.095
box1.Z0.timerlog.txt:step_B_update_p-thread-block22:	0.112
box1.Z0.timerlog.txt:step_B_update_p-thread-block23:	0.131
box1.Z0.timerlog.txt:step_B_update_p-thread-block24:	0.128
box1.Z0.timerlog.txt:step_B_update_p-thread-block25:	0.085
box1.Z0.timerlog.txt:step_B_update_p-thread-block26:	0.104
box1.Z0.timerlog.txt:step_B_update_p-thread-block27:	0.094
box1.Z0.timerlog.txt:step_B_update_p-thread-block28:	0.099
box1.Z0.timerlog.txt:step_B_update_p-thread-block29:	0.087
box1.Z0.timerlog.txt:step_B_update_p-thread-block3:	0.157
box1.Z0.timerlog.txt:step_B_update_p-thread-block30:	0.104
box1.Z0.timerlog.txt:step_B_update_p-thread-block31:	0.13
box1.Z0.timerlog.txt:step_B_update_p-thread-block32:	0.121
box1.Z0.timerlog.txt:step_B_update_p-thread-block33:	0.036
box1.Z0.timerlog.txt:step_B_update_p-thread-block34:	0.04
box1.Z0.timerlog.txt:step_B_update_p-thread-block35:	0.045
box1.Z0.timerlog.txt:step_B_update_p-thread-block36:	0.041
box1.Z0.timerlog.txt:step_B_update_p-thread-block37:	0.04
box1.Z0.timerlog.txt:step_B_update_p-thread-block38:	0.044
box1.Z0.timerlog.txt:step_B_update_p-thread-block39:	0.064
box1.Z0.timerlog.txt:step_B_update_p-thread-block4:	0.169
box1.Z0.timerlog.txt:step_B_update_p-thread-block40:	0.053
box1.Z0.timerlog.txt:step_B_update_p-thread-block41:	0.077
box1.Z0.timerlog.txt:step_B_update_p-thread-block42:	0.069
box1.Z0.timerlog.txt:step_B_update_p-thread-block43:	0.088
box1.Z0.timerlog.txt:step_B_update_p-thread-block44:	0.067
box1.Z0.timerlog.txt:step_B_update_p-thread-block45:	0.089
box1.Z0.timerlog.txt:step_B_update_p-thread-block46:	0.083
box1.Z0.timerlog.txt:step_B_update_p-thread-block47:	0.108
box1.Z0.timerlog.txt:step_B_update_p-thread-block48:	0.112
box1.Z0.timerlog.txt:step_B_update_p-thread-block49:	0.054
box1.Z0.timerlog.txt:step_B_update_p-thread-block5:	0.153
box1.Z0.timerlog.txt:step_B_update_p-thread-block50:	0.057
box1.Z0.timerlog.txt:step_B_update_p-thread-block51:	0.063
box1.Z0.timerlog.txt:step_B_update_p-thread-block52:	0.062
box1.Z0.timerlog.txt:step_B_update_p-thread-block53:	0.059
box1.Z0.timerlog.txt:step_B_update_p-thread-block54:	0.071
box1.Z0.timerlog.txt:step_B_update_p-thread-block55:	0.088
box1.Z0.timerlog.txt:step_B_update_p-thread-block56:	0.082
box1.Z0.timerlog.txt:step_B_update_p-thread-block57:	0.059
box1.Z0.timerlog.txt:step_B_update_p-thread-block58:	0.071
box1.Z0.timerlog.txt:step_B_update_p-thread-block59:	0.075
box1.Z0.timerlog.txt:step_B_update_p-thread-block6:	0.181
box1.Z0.timerlog.txt:step_B_update_p-thread-block60:	0.063
box1.Z0.timerlog.txt:step_B_update_p-thread-block61:	0.058
box1.Z0.timerlog.txt:step_B_update_p-thread-block62:	0.075
box1.Z0.timerlog.txt:step_B_update_p-thread-block63:	0.087
box1.Z0.timerlog.txt:step_B_update_p-thread-block64:	0.085
box1.Z0.timerlog.txt:step_B_update_p-thread-block65:	0.051
box1.Z0.timerlog.txt:step_B_update_p-thread-block66:	0.076
box1.Z0.timerlog.txt:step_B_update_p-thread-block67:	0.059
box1.Z0.timerlog.txt:step_B_update_p-thread-block68:	0.063
box1.Z0.timerlog.txt:step_B_update_p-thread-block69:	0.058
box1.Z0.timerlog.txt:step_B_update_p-thread-block7:	0.231
box1.Z0.timerlog.txt:step_B_update_p-thread-block70:	0.075
box1.Z0.timerlog.txt:step_B_update_p-thread-block71:	0.077
box1.Z0.timerlog.txt:step_B_update_p-thread-block72:	0.091
box1.Z0.timerlog.txt:step_B_update_p-thread-block73:	0.054
box1.Z0.timerlog.txt:step_B_update_p-thread-block74:	0.07
box1.Z0.timerlog.txt:step_B_update_p-thread-block75:	0.065
box1.Z0.timerlog.txt:step_B_update_p-thread-block76:	0.08
box1.Z0.timerlog.txt:step_B_update_p-thread-block77:	0.075
box1.Z0.timerlog.txt:step_B_update_p-thread-block78:	0.073
box1.Z0.timerlog.txt:step_B_update_p-thread-block79:	0.096
box1.Z0.timerlog.txt:step_B_update_p-thread-block8:	0.233
box1.Z0.timerlog.txt:step_B_update_p-thread-block80:	0.089
box1.Z0.timerlog.txt:step_B_update_p-thread-block9:	0.101
fbblock.cpp:	d->q=this;
fbblock.cpp:	d->m_Nx = d->m_Ny = d->m_Nz = 0;
fbblock.cpp:	d->m_num_variables=0;
fbblock.cpp:	d->m_use_precondioner=false;
fbblock.cpp:	d->m_block_id=QString("block%1").arg(block_num);
fbblock.cpp:	for (int i=0; i<3; i++) d->m_resolution[i]=1;
fbblock.cpp: d->m_bvf_map=P.BVF;
fbblock.cpp: d->m_stiffness_matrix=P.stiffness_matrix;
fbblock.cpp: d->m_Nx=P.Nx;  d->m_Ny=P.Ny;  d->m_Nz=P.Nz;
fbblock.cpp: d->m_use_precondioner=P.use_preconditioner;
fbblock.cpp: for (int i=0; i<3; i++) d->m_resolution[i]=P.resolution[i];
fbblock.cpp: d->m_block_x_position=P.block_x_position;
fbblock.cpp: d->m_block_y_position=P.block_y_position;
fbblock.cpp: d->m_block_z_position=P.block_z_position;
fbblock.cpp: d->m_num_variables=0;
fbblock.cpp: d->m_variable_indices.allocate(P.Nx+2, P.Ny+2, P.Nz+2);
fbblock.cpp: d->m_variable_indices.setAll(-1);
fbblock.cpp:      d->m_variable_indices.setValue(d->m_num_variables, xx, yy, zz);
fbblock.cpp:      d->m_num_variables += 3; // Each vertex contains 3 directions
fbblock.cpp: if (!d->m_num_variables) 
fbblock.cpp: d->m_x.allocate(d->m_num_variables);
fbblock.cpp: d->m_r.allocate(d->m_num_variables);
fbblock.cpp: d->m_p.allocate(d->m_num_variables);
fbblock.cpp: d->m_Ap.allocate(d->m_num_variables);
fbblock.cpp: d->m_free.allocate(d->m_num_variables);
fbblock.cpp: d->m_vertex_type.allocate(d->m_num_variables);	
fbblock.cpp:        long varind=d->m_variable_indices.value(xx,yy,zz)+dd;
fbblock.cpp:           if (!P.fixed.value(xx,yy,zz,dd)) d->m_free.ptr[varind]=1;  
fbblock.cpp:               d->m_vertex_type.ptr[varind] = 1; // Internal vertex          
fbblock.cpp:               d->m_vertex_type.ptr[varind]=2; //inner interface vertex
fbblock.cpp:                  d->m_inner_vertex_locations << VL;
fbblock.cpp:               d->m_vertex_type.ptr[varind]=3; //outer interface vertex
fbblock.cpp:                  d->m_outer_vertex_locations << VL;
fbblock.cpp:           d->m_x.ptr[varind]=P.X0.value(xx,yy,zz,dd);
fbblock.cpp:       E0.ref_indices[0]=(long)d->m_variable_indices.value(xx,yy,zz);
fbblock.cpp:       E0.ref_indices[1]=(long)d->m_variable_indices.value(xx,yy+1,zz);
fbblock.cpp:       E0.ref_indices[2]=(long)d->m_variable_indices.value(xx,yy,zz+1);
fbblock.cpp:       E0.ref_indices[3]=(long)d->m_variable_indices.value(xx,yy+1,zz+1);
fbblock.cpp:       d->m_elements << E0;
fbblock.cpp: d->multiply_by_A(d->m_r,d->m_x); //r=Ax
fbblock.cpp: for (long ii=0; ii<d->m_num_variables; ii++) 
fbblock.cpp:    d->m_r.ptr[ii] *= -1; // Multiply r by -1: r = -Ax
fbblock.cpp: P.rnorm2=d->inner_product_on_owned_free_variables(d->m_r,d->m_r); // to compare with bnorm2 as the reference norm
fbblock.cpp: if (d->m_use_precondioner) 
fbblock.cpp:     d->m_preconditioner.allocate(d->m_num_variables);	
fbblock.cpp:     d->compute_preconditioner(d->m_preconditioner);
fbblock.cpp: for (long ii=0; ii<d->m_num_variables; ii++) 
fbblock.cpp:    if (d->m_free.ptr[ii]) 
fbblock.cpp:       if ((d->m_use_precondioner)&&(d->m_preconditioner.ptr[ii])) 
fbblock.cpp:         { d->m_p.ptr[ii]=d->m_r.ptr[ii]/d->m_preconditioner.ptr[ii]; }
fbblock.cpp:       else d->m_p.ptr[ii]=d->m_r.ptr[ii];
fbblock.cpp:	for (int ii=0; ii<d->m_inner_vertex_locations.count(); ii++) { 
fbblock.cpp:		FBVertexLocation *VL=&d->m_inner_vertex_locations[ii];
fbblock.cpp:			if (d->m_free.ptr[varind]) {
fbblock.cpp:					P.p_on_inner_interface.setValue(d->m_p.ptr[varind],dd,VL->x,VL->y,VL->z);
fbblock.cpp: P.p_on_top_inner_interface.allocate(3, d->m_Nx, d->m_Ny);
fbblock.cpp: P.p_on_bottom_inner_interface.allocate(3, d->m_Nx, d->m_Ny);
fbblock.cpp: for (int ii=0; ii<d->m_inner_vertex_locations.count(); ii++) 
fbblock.cpp:    FBVertexLocation *VL=&d->m_inner_vertex_locations[ii];
fbblock.cpp:       if (d->m_free.ptr[varind]) 
fbblock.cpp:         if (VL->z==1) P.p_on_top_inner_interface.setValue(d->m_p.ptr[varind],dd,VL->x-1,VL->y-1);
fbblock.cpp:         else if (VL->z==d->m_Nz) P.p_on_bottom_inner_interface.setValue(d->m_p.ptr[varind],dd,VL->x-1,VL->y-1);
fbblock.cpp:	/*for (int ii=0; ii<d->m_outer_vertex_locations.count(); ii++) {
fbblock.cpp:		FBVertexLocation *VL=&d->m_outer_vertex_locations[ii];
fbblock.cpp:			if (d->m_free.ptr[varind]) {
fbblock.cpp:				d->m_p.ptr[varind]=P.p_on_outer_interface.value(dd,VL->x,VL->y,VL->z);
fbblock.cpp:	for (int ii=0; ii<d->m_outer_vertex_locations.count(); ii++) {
fbblock.cpp:		FBVertexLocation *VL=&d->m_outer_vertex_locations[ii];
fbblock.cpp:			if (d->m_free.ptr[varind]) {
fbblock.cpp:				if (VL->z==0) d->m_p.ptr[varind]=P.p_on_top_outer_interface.value(dd,VL->x-1,VL->y-1);
fbblock.cpp:				else if (VL->z==d->m_Nz+1) d->m_p.ptr[varind]=P.p_on_bottom_outer_interface.value(dd,VL->x-1,VL->y-1);
fbblock.cpp:	FBTimer::startTimer(QString("step_A_multipy_by_A-thread-%1").arg(d->m_block_id));
fbblock.cpp:	d->multiply_by_A(d->m_Ap,d->m_p); 
fbblock.cpp:	FBTimer::stopTimer(QString("step_A_multipy_by_A-thread-%1").arg(d->m_block_id));
fbblock.cpp:	FBTimer::startTimer(QString("step_A_inner_products-thread-%1").arg(d->m_block_id));
fbblock.cpp:	if (d->m_use_precondioner) {
fbblock.cpp:		P.r_z=d->inner_product_on_owned_free_variables(d->m_r,d->m_r,d->m_preconditioner);
fbblock.cpp:		P.r_Ap=d->inner_product_on_owned_free_variables(d->m_r,d->m_Ap,d->m_preconditioner);
fbblock.cpp:		P.Ap_Ap=d->inner_product_on_owned_free_variables(d->m_Ap,d->m_Ap,d->m_preconditioner);
fbblock.cpp:		P.r_z=d->inner_product_on_owned_free_variables(d->m_r,d->m_r);
fbblock.cpp:		P.r_Ap=d->inner_product_on_owned_free_variables(d->m_r,d->m_Ap);
fbblock.cpp:		P.Ap_Ap=d->inner_product_on_owned_free_variables(d->m_Ap,d->m_Ap);
fbblock.cpp:	P.p_Ap=d->inner_product_on_owned_free_variables(d->m_p,d->m_Ap);
fbblock.cpp:	FBTimer::stopTimer(QString("step_A_inner_products-thread-%1").arg(d->m_block_id));
fbblock.cpp:	FBTimer::startTimer(QString("step_B_update_p-thread-%1").arg(d->m_block_id));
fbblock.cpp:	for (long ii=0; ii<d->m_num_variables; ii++) {
fbblock.cpp:		d->m_r.ptr[ii]=d->m_r.ptr[ii]-d->m_Ap.ptr[ii]*P.alpha; //r is never valid on the outer interface
fbblock.cpp:		if (d->m_free.ptr[ii]) {
fbblock.cpp:			d->m_x.ptr[ii]=d->m_x.ptr[ii]+d->m_p.ptr[ii]*P.alpha; //x is valid everywhere			
fbblock.cpp:			if ((d->m_use_precondioner)&&(d->m_preconditioner.ptr[ii])) {
fbblock.cpp:				d->m_p.ptr[ii]=d->m_p.ptr[ii]*P.beta+d->m_r.ptr[ii]/d->m_preconditioner.ptr[ii]; //p is now not valid on the outer interface
fbblock.cpp:				d->m_p.ptr[ii]=d->m_p.ptr[ii]*P.beta+d->m_r.ptr[ii]; //p is now not valid on the outer interface
fbblock.cpp:	FBTimer::stopTimer(QString("step_B_update_p-thread-%1").arg(d->m_block_id));
fbblock.cpp:	FBTimer::startTimer(QString("step_B_p_inner_products-thread-%1").arg(d->m_block_id));
fbblock.cpp:	P.r_r=d->inner_product_on_owned_free_variables(d->m_r,d->m_r);
fbblock.cpp:	P.bb_bb=d->inner_product_on_owned_fixed_variables(d->m_r,d->m_r);
fbblock.cpp:	FBTimer::stopTimer(QString("step_B_p_inner_products-thread-%1").arg(d->m_block_id));
fbblock.cpp:	FBTimer::startTimer(QString("step_B_compute_stress-thread-%1").arg(d->m_block_id));
fbblock.cpp:	P.stress=d->compute_stress();
fbblock.cpp:	FBTimer::stopTimer(QString("step_B_compute_stress-thread-%1").arg(d->m_block_id));
fbblock.cpp:	/*P.p_on_inner_interface.allocate(DATA_TYPE_FLOAT,3,d->m_Nx+2,d->m_Ny+2,d->m_Nz+2);
fbblock.cpp:	for (int ii=0; ii<d->m_inner_vertex_locations.count(); ii++) {
fbblock.cpp:		FBVertexLocation *VL=&d->m_inner_vertex_locations[ii];
fbblock.cpp:			if (d->m_free.ptr[varind]) {
fbblock.cpp:				else if (pass==3) P.p_on_inner_interface.setValue(d->m_p.ptr[varind],dd,VL->x,VL->y,VL->z);
fbblock.cpp:	FBTimer::startTimer(QString("step_B_p_on_inner_interface-thread-%1").arg(d->m_block_id));
fbblock.cpp:	P.p_on_top_inner_interface.allocate(3,d->m_Nx,d->m_Ny);
fbblock.cpp:	P.p_on_bottom_inner_interface.allocate(3,d->m_Nx,d->m_Ny);
fbblock.cpp:	for (int ii=0; ii<d->m_inner_vertex_locations.count(); ii++) {
fbblock.cpp:		FBVertexLocation *VL=&d->m_inner_vertex_locations[ii];
fbblock.cpp:			if (d->m_free.ptr[varind]) {
fbblock.cpp:				if (VL->z==1) P.p_on_top_inner_interface.setValue(d->m_p.ptr[varind],dd,VL->x-1,VL->y-1);
fbblock.cpp:				else if (VL->z==d->m_Nz) P.p_on_bottom_inner_interface.setValue(d->m_p.ptr[varind],dd,VL->x-1,VL->y-1);
fbblock.cpp:	FBTimer::stopTimer(QString("step_B_p_on_inner_interface-thread-%1").arg(d->m_block_id));
fbblock.cpp:	long varind=d->m_variable_indices.value(xx,yy,zz); 
fbblock.cpp:	return d->m_x.ptr[varind];	
fbblock.cpp: long varind=d->m_variable_indices.value(xx, yy, zz); 
fbblock.cpp: return d->m_r.ptr[varind];	
fbblock.cpp:	for (long i=0; i<d->m_free.length();i++)
fbblock.cpp:		if ((d->m_free.ptr[i])&&(d->m_vertex_type.ptr[i]!=3)) ret++;
fbblock.cpp:	return d->m_num_variables;
fbblock.cpp:	d->m_free.clear();
fbblock.cpp:	d->m_Ap.clear();
fbblock.cpp:	d->m_p.clear();
fbblock.cpp:	d->m_vertex_type.clear();
fbblock.cpp:	d->m_elements.clear();
fbblock.cpp:	d->m_inner_vertex_locations.clear();
fbblock.cpp:	d->m_outer_vertex_locations.clear();
fbblock.cpp:	d->m_x.clear();
fbblock.cpp:	d->m_r.clear();
fbblock.cpp:	d->m_variable_indices.clear();
fbblock.cpp: for (int i=0; i<3; i++) d->m_resolution[i]=res[i];
fbblock.cpp:	for (long i=0; i<d->m_free.length();i++)
fbblock.cpp:		if (d->m_vertex_type.ptr[i]!=3) ret++;
fbblock.cpp:QList<double> FBBlock::getStress() { return d->compute_stress(); }
fbblock.cpp:		stiffness_matrix_data[ct]=d->m_stiffness_matrix.value(rr,cc);
fbblock.cpp:	E.allocate(DATA_TYPE_FLOAT,1,d->m_Nx+1,d->m_Ny+1,d->m_Nz+1);
fbblock.cpp:		for (long i3=0; i3<d->m_Nz+1; i3++)
fbblock.cpp:		for (long i2=0; i2<d->m_Ny+1; i2++)
fbblock.cpp:		for (long i1=0; i1<d->m_Nx+1; i1++)  {
fbblock.cpp:			if (is_element(d->m_bvf_map,i1,i2,i3)) {
fbblock.cpp:	for (long zz=0; zz<d->m_Nz+1; zz++)
fbblock.cpp:	for (long yy=0; yy<d->m_Ny+1; yy++)
fbblock.cpp:	for (long xx=0; xx<d->m_Nx+1; xx++)  {
fbblock.cpp:		if (is_element(d->m_bvf_map,xx,yy,zz)) {
fbblock.cpp:			fbreal bvf=d->m_bvf_map.value(xx,yy,zz);
fbblock.cpp:			ref_indices[0]=(long)d->m_variable_indices.value(xx,yy,zz);
fbblock.cpp:			ref_indices[1]=(long)d->m_variable_indices.value(xx,yy+1,zz);
fbblock.cpp:			ref_indices[2]=(long)d->m_variable_indices.value(xx,yy,zz+1);
fbblock.cpp:			ref_indices[3]=(long)d->m_variable_indices.value(xx,yy+1,zz+1);
fbblock.cpp:					X0[kk]=d->m_x.ptr[varinds[kk]];
fbblock.cpp:			/*fbreal bvf=d->m_bvf_map.value(i1,i2,i3);
fbblock.cpp:				long avarind=d->m_variable_indices.value(i1+a1,i2+a2,i3+a3)+adir;
fbblock.cpp:					long bvarind=d->m_variable_indices.value(i1+b1,i2+b2,i3+b3)+bdir;
fbblock.cpp:					float val0=d->m_x.ptr[bvarind]
fbblock.cpp:							*d->m_x.ptr[avarind]
fbblock.cpp:							*d->m_stiffness_matrix.value(adir+a1*3+a2*6+a3*12,bdir+b1*3+b2*6+b3*12)
fbblock.cpp:	return d->m_Nx;
fbblock.cpp:	return d->m_Ny;
fbblock.cpp:	return d->m_Nz;
fbblock.cpp:	return d->m_block_x_position;
fbblock.cpp:	return d->m_block_y_position;
fbblock.cpp:	return d->m_block_z_position;
fbblocksolver.cpp:	d->q=this;
fbblocksolver.cpp:	d->m_epsilon=0.001F;
fbblocksolver.cpp:	d->m_max_iterations=0;
fbblocksolver.cpp:	d->m_num_threads=1;
fbblocksolver.cpp:	d->m_use_precondioner=false;
fbblocksolver.cpp:	for (int i=0; i<3; i++) d->m_resolution[i]=1;
fbblocksolver.cpp:	d->m_num_iterations=0;
fbblocksolver.cpp:	qDeleteAll(d->m_blocks);
fbblocksolver.cpp:void FBBlockSolver::setEpsilon(fbreal epsilon) {d->m_epsilon=epsilon;}
fbblocksolver.cpp:void FBBlockSolver::setMaxIterations(int val) {d->m_max_iterations=val;}
fbblocksolver.cpp:void FBBlockSolver::setNumThreads(int val) {d->m_num_threads=val;}
fbblocksolver.cpp:void FBBlockSolver::setUsePreconditioner(bool val) {d->m_use_precondioner=val;}
fbblocksolver.cpp:	d->m_stiffness_matrix=stiffness_matrix;
fbblocksolver.cpp:	d->m_bvf_map=bvf_map;
fbblocksolver.cpp:FBArray3D<unsigned char>& FBBlockSolver::getBVFMap() const { return d->m_bvf_map; }
fbblocksolver.cpp:	d->m_initial_displacements=displacements;
fbblocksolver.cpp:	d->m_fixed_variables=fixed_variables;
fbblocksolver.cpp: NN1 = d->m_bvf_map.N1(); NN2 = d->m_bvf_map.N2(); 
fbblocksolver.cpp: NN3 = d->m_bvf_map.N3();
fbblocksolver.cpp:    val  = d->m_bvf_map.value(ii, jj, kk);
fbblocksolver.cpp:    d->m_bvf_map.setValue(val, ii, jj, kk);
fbblocksolver.cpp:    //d->m_bvf_map.setValue(0.00001, ii, jj, kk);
fbblocksolver.cpp: int N1=d->m_bvf_map.N1();
fbblocksolver.cpp: int N2=d->m_bvf_map.N2();
fbblocksolver.cpp: int N3=d->m_bvf_map.N3();
fbblocksolver.cpp:      if (is_vertex(d->m_bvf_map,x,y,z)) 
fbblocksolver.cpp: double num_vertices_per_thread=total_vertex_count*1.0/d->m_num_threads;
fbblocksolver.cpp: for (int ithread=0; ithread<d->m_num_threads; ithread++) 
fbblocksolver.cpp:   if (ithread==d->m_num_threads-1) {block_info0.zmax=N3;}
fbblocksolver.cpp: qDeleteAll(d->m_blocks);
fbblocksolver.cpp: d->m_blocks.clear();
fbblocksolver.cpp:	//Set up the blocks and d->m_p
fbblocksolver.cpp:	/*d->m_p.allocate(DATA_TYPE_FLOAT,3,d->m_bvf_map.N1()+1,d->m_bvf_map.N2()+1,d->m_bvf_map.N3()+1);
fbblocksolver.cpp:		for (long z=0; z<d->m_bvf_map.N3()+1; z++)
fbblocksolver.cpp:		for (long y=0; y<d->m_bvf_map.N2()+1; y++)
fbblocksolver.cpp:		for (long x=0; x<d->m_bvf_map.N1()+1; x++) {
fbblocksolver.cpp:				if (is_vertex(d->m_bvf_map,x,y,z)) {
fbblocksolver.cpp:						d->m_p.setupIndex(pass,dd,x,y,z);
fbblocksolver.cpp:   PP.use_preconditioner=d->m_use_precondioner;
fbblocksolver.cpp:   for (int i=0; i<3; i++) PP.resolution[i]=d->m_resolution[i];
fbblocksolver.cpp:      unsigned char val=d->m_bvf_map.value(xx,yy,zz);
fbblocksolver.cpp:       if (d->m_fixed_variables.value(dd,xx,yy,zz)) 
fbblocksolver.cpp:   PP.stiffness_matrix=d->m_stiffness_matrix;
fbblocksolver.cpp:       PP.X0.setValue(d->m_initial_displacements.value(dd,xx,yy,zz),xx0,yy0,zz0,dd);   
fbblocksolver.cpp:			d->m_p.setValue(val0,dd0,Info0.xmin-1+xx0,Info0.ymin-1+yy0,Info0.zmin-1+zz0);
fbblocksolver.cpp:   d->m_blocks << B;
fbblocksolver.cpp: printf("Using %d blocks.\n",d->m_blocks.count());
fbblocksolver.cpp: for (long i=0; i<d->m_blocks.count(); i++) 
fbblocksolver.cpp:     //FBBlock *B0=d->m_blocks[i];
fbblocksolver.cpp: d->m_PPP_B.clear();
fbblocksolver.cpp: for (int i=0; i<d->m_blocks.count(); i++) 
fbblocksolver.cpp:     d->m_PPP_B << PP;
fbblocksolver.cpp: while (((d->m_num_iterations<d->m_max_iterations)||(d->m_max_iterations<=0))  &&  
fbblocksolver.cpp:			for (long iblock=0; iblock<d->m_blocks.count(); iblock++) {
fbblocksolver.cpp:				FBBlock *B0=d->m_blocks[iblock];
fbblocksolver.cpp:						float val0=d->m_p.value(dd,xx,yy,zz);
fbblocksolver.cpp:    for (int iblock=0; iblock<d->m_blocks.count(); iblock++) 
fbblocksolver.cpp:      if (iblock+1<d->m_blocks.count()) PPP_A[iblock].p_on_bottom_outer_interface=block_infos[iblock+1].p_on_top_inner_interface;
fbblocksolver.cpp:    for (int i=0; i<d->m_num_threads; i++) 
fbblocksolver.cpp:    for (int i=0; i<d->m_blocks.count(); i++) 
fbblocksolver.cpp:       if (d->m_num_threads>1) thread_number=i%d->m_num_threads;
fbblocksolver.cpp:       threads[thread_number]->step_B_parameters << &d->m_PPP_B[i];
fbblocksolver.cpp:       threads[thread_number]->blocks << d->m_blocks[i];
fbblocksolver.cpp:    for (int i=0; i<d->m_num_threads; i++) 
fbblocksolver.cpp:       for (int i=0; i<d->m_num_threads; i++) 
fbblocksolver.cpp:  }                      // End of while(((d->m_num_iterations<d->m_max_iterations) ...
fbblocksolver.cpp: for (long i=0; i<d->m_blocks.count(); i++) 
fbblocksolver.cpp: for (long i=0; i<d->m_blocks.count(); i++) 
fbblocksolver.cpp:     d->m_PPP_B[i].alpha=r_z/p_Ap; 
fbblocksolver.cpp:     d->m_PPP_B[i].beta=(r_z-2*d->m_PPP_B[i].alpha*r_Ap+d->m_PPP_B[i].alpha*d->m_PPP_B[i].alpha*Ap_Ap)/r_z;
fbblocksolver.cpp:     d->m_PPP_B[i].WN[0]=d->m_bvf_map.N1();
fbblocksolver.cpp:     d->m_PPP_B[i].WN[1]=d->m_bvf_map.N2();
fbblocksolver.cpp:     d->m_PPP_B[i].WN[2]=d->m_bvf_map.N3();
fbblocksolver.cpp: for (int i=0; i<d->m_num_threads; i++) 
fbblocksolver.cpp:       for (int i=0; i<d->m_num_threads; i++) 
fbblocksolver.cpp:		for (long i=0; i<d->m_blocks.count(); i++) {		
fbblocksolver.cpp:			int x0=d->m_blocks[i]->xPosition();
fbblocksolver.cpp:			int y0=d->m_blocks[i]->yPosition();
fbblocksolver.cpp:			int z0=d->m_blocks[i]->zPosition();
fbblocksolver.cpp:			d->m_PPP_B[i].p_on_inner_interface.resetIteration();
fbblocksolver.cpp:			while (d->m_PPP_B[i].p_on_inner_interface.advanceIteration()) {
fbblocksolver.cpp:				int dd0=d->m_PPP_B[i].p_on_inner_interface.currentIndex1();
fbblocksolver.cpp:				int xx0=d->m_PPP_B[i].p_on_inner_interface.currentIndex2();
fbblocksolver.cpp:				int yy0=d->m_PPP_B[i].p_on_inner_interface.currentIndex3();
fbblocksolver.cpp:				int zz0=d->m_PPP_B[i].p_on_inner_interface.currentIndex4();
fbblocksolver.cpp:				float val0=d->m_PPP_B[i].p_on_inner_interface.currentValue();
fbblocksolver.cpp:				d->m_p.setValue(val0,dd0,x0-1+xx0,y0-1+yy0,z0-1+zz0);
fbblocksolver.cpp: for (int i=0; i<d->m_blocks.count(); i++) 
fbblocksolver.cpp:     block_infos[i].p_on_top_inner_interface=d->m_PPP_B[i].p_on_top_inner_interface;
fbblocksolver.cpp:     block_infos[i].p_on_bottom_inner_interface=d->m_PPP_B[i].p_on_bottom_inner_interface;
fbblocksolver.cpp: d->m_num_iterations++;
fbblocksolver.cpp: d->m_error_estimator.addStressData(stress0);
fbblocksolver.cpp: qDebug() << QString("Iteration %1, Stress: (%2,%3,%4,%5,%6,%7), Est. Rel. Err.: %8").arg(d->m_num_iterations)
fbblocksolver.cpp:                      .arg(d->m_error_estimator.estimatedRelativeError());
fbblocksolver.cpp: if   (d->m_error_estimator.estimatedRelativeError()<d->m_epsilon)  num_times_below_epsilon++;
fbblocksolver.cpp: for (long i=0; i<d->m_blocks.count(); i++) { d->m_blocks[i]->clearArrays(); }
fbblocksolver.cpp:	long N1=d->m_bvf_map.N1();
fbblocksolver.cpp:	long N2=d->m_bvf_map.N2();
fbblocksolver.cpp:	long N3=d->m_bvf_map.N3();
fbblocksolver.cpp:	d->m_fixed_variables.allocate(DATA_TYPE_BYTE,3,N1+1,N2+1,N3+1);
fbblocksolver.cpp:		if (is_vertex(d->m_bvf_map,i1,i2,i3)) {
fbblocksolver.cpp:				if (fix1) {d->m_fixed_variables.setupIndex(pass,0,i1,i2,i3);}
fbblocksolver.cpp:				if (fix2) {d->m_fixed_variables.setupIndex(pass,1,i1,i2,i3);}
fbblocksolver.cpp:				if (fix3) {d->m_fixed_variables.setupIndex(pass,2,i1,i2,i3);}
fbblocksolver.cpp:				if (fix1) {d->m_fixed_variables.setValue(1,0,i1,i2,i3);}
fbblocksolver.cpp:				if (fix2) {d->m_fixed_variables.setValue(1,1,i1,i2,i3);}
fbblocksolver.cpp:				if (fix3) {d->m_fixed_variables.setValue(1,2,i1,i2,i3);}
fbblocksolver.cpp:		if (is_element(d->m_bvf_map,i1,i2,i3))
fbblocksolver.cpp: long N1=d->m_bvf_map.N1(), N2=d->m_bvf_map.N2(), N3=d->m_bvf_map.N3();
fbblocksolver.cpp: d->m_initial_displacements.allocate(DATA_TYPE_FLOAT,3,N1+1,N2+1,N3+1);	
fbblocksolver.cpp:     if (is_vertex(d->m_bvf_map, i1, i2, i3)) 
fbblocksolver.cpp:          if (pass<=2) d->m_initial_displacements.setupIndex(pass,dd,i1,i2,i3);
fbblocksolver.cpp:             d->m_initial_displacements.setValue(initial_displacement(i1,i2,i3,dd,d->m_resolution,strain),dd,i1,i2,i3);
fbblocksolver.cpp:		       d->m_bvf_map.N1()+1,  d->m_bvf_map.N2()+1,  d->m_bvf_map.N3()+1);
fbblocksolver.cpp: for (long z=0; z<d->m_bvf_map.N3()+1; z++)
fbblocksolver.cpp: for (long y=0; y<d->m_bvf_map.N2()+1; y++)
fbblocksolver.cpp: for (long x=0; x<d->m_bvf_map.N1()+1; x++)
fbblocksolver.cpp:   if (is_vertex(d->m_bvf_map,x,y,z)) 
fbblocksolver.cpp:for (long i=0; i<d->m_blocks.count(); i++) 
fbblocksolver.cpp: long x0=d->m_blocks[i]->xPosition();
fbblocksolver.cpp: long y0=d->m_blocks[i]->yPosition();
fbblocksolver.cpp: long z0=d->m_blocks[i]->zPosition();
fbblocksolver.cpp: for (int kk=0; kk<d->m_blocks[i]->Nz(); kk++)
fbblocksolver.cpp: for (int jj=0; jj<d->m_blocks[i]->Ny(); jj++)
fbblocksolver.cpp: for (int ii=0; ii<d->m_blocks[i]->Nx(); ii++) 
fbblocksolver.cpp:    if (is_vertex(d->m_bvf_map,x0+ii,y0+jj,z0+kk)) 
fbblocksolver.cpp:         fbreal displacement0=d->m_blocks[i]->getDisplacement(ii+1, jj+1, kk+1, dd);
fbblocksolver.cpp:                 d->m_bvf_map.N1()+1, d->m_bvf_map.N2()+1, d->m_bvf_map.N3()+1);
fbblocksolver.cpp:   for (long z=0; z<d->m_bvf_map.N3()+1; z++)
fbblocksolver.cpp:   for (long y=0; y<d->m_bvf_map.N2()+1; y++)
fbblocksolver.cpp:   for (long x=0; x<d->m_bvf_map.N1()+1; x++)
fbblocksolver.cpp:    if (is_vertex(d->m_bvf_map,x,y,z)) 
fbblocksolver.cpp: for (long i=0; i<d->m_blocks.count(); i++) 
fbblocksolver.cpp:   long x0=d->m_blocks[i]->xPosition();
fbblocksolver.cpp:   long y0=d->m_blocks[i]->yPosition();
fbblocksolver.cpp:   long z0=d->m_blocks[i]->zPosition();
fbblocksolver.cpp:   for (int kk=0;  kk < d->m_blocks[i]->Nz();  kk++)
fbblocksolver.cpp:   for (int jj=0;  jj < d->m_blocks[i]->Ny();  jj++)
fbblocksolver.cpp:   for (int ii=0;  ii < d->m_blocks[i]->Nx();  ii++) 
fbblocksolver.cpp:      if (is_vertex(d->m_bvf_map,x0+ii,y0+jj,z0+kk)) 
fbblocksolver.cpp:           fbreal force0 = d->m_blocks[i]->getForce(ii+1, jj+1, kk+1, dd);
fbblocksolver.cpp:	for (int i=0; i<3; i++) d->m_resolution[i]=res[i];
fbblocksolver.cpp:	double stress_denominator=(d->m_bvf_map.N1()*d->m_bvf_map.N2()*d->m_bvf_map.N3()*d->m_resolution[0]*d->m_resolution[1]*d->m_resolution[2]);
fbblocksolver.cpp:	int num_blocks=d->m_blocks.count();
fbblocksolver.cpp:		T0->block=d->m_blocks[ii];
fbblocksolver.cpp:        (d->m_bvf_map.N1()*d->m_bvf_map.N2()*d->m_bvf_map.N3() * 
fbblocksolver.cpp:         d->m_resolution[0]*d->m_resolution[1]*d->m_resolution[2]);
fbblocksolver.cpp: for (int ii=0; ii<d->m_blocks.count(); ii++) 
fbblocksolver.cpp:    for (int jj=0; jj<6; jj++) ret[jj] += d->m_PPP_B[ii].stress[jj];
fbblocksolver.cpp:int FBBlockSolver::getNumIterations() {	return d->m_num_iterations; }
fbblocksolver.cpp:	energy.allocate(DATA_TYPE_FLOAT,1,d->m_bvf_map.N1(),d->m_bvf_map.N2(),d->m_bvf_map.N3());
fbblocksolver.cpp:		for (long z=0; z<d->m_bvf_map.N3(); z++)
fbblocksolver.cpp:		for (long y=0; y<d->m_bvf_map.N2(); y++)
fbblocksolver.cpp:		for (long x=0; x<d->m_bvf_map.N1(); x++)
fbblocksolver.cpp:		if (is_element(d->m_bvf_map,x,y,z)) {
fbblocksolver.cpp:	for (long i=0; i<d->m_blocks.count(); i++) {
fbblocksolver.cpp:		d->m_blocks[i]->computeEnergyMap(energy_map0);
fbblocksolver.cpp:		long x0=d->m_blocks[i]->xPosition();
fbblocksolver.cpp:		long y0=d->m_blocks[i]->yPosition();
fbblocksolver.cpp:		long z0=d->m_blocks[i]->zPosition();
fbblocksolver.cpp:		for (int kk=0; kk<d->m_blocks[i]->Nz()+1; kk++)
fbblocksolver.cpp:		for (int jj=0; jj<d->m_blocks[i]->Ny()+1; jj++)
fbblocksolver.cpp:		for (int ii=0; ii<d->m_blocks[i]->Nx()+1; ii++) {
fbblocksolver.cpp:			if (is_element(d->m_bvf_map,x0-1+ii,y0-1+jj,z0-1+kk)) {
fbblocksolver.cpp:FBErrorEstimator *FBBlockSolver::errorEstimator() {return &d->m_error_estimator;}
fbblocksolver.cpp: d->m_num_iterations = 0;
fberrorestimator.cpp:	d->q=this;
fberrorestimator.cpp:	d->m_stress_records << stress;
fberrorestimator.cpp:	if (iteration<0) iteration=d->m_stress_records.count()-1;
fberrorestimator.cpp:	if (iteration>=d->m_stress_records.count()) return 1;
fberrorestimator.cpp:	while (iteration>=d->m_estimated_relative_errors.count()) {
fberrorestimator.cpp:		float val0=compute_estimated_relative_error(d->m_stress_records,iteration);
fberrorestimator.cpp:		d->m_estimated_relative_errors << val0;
fberrorestimator.cpp:	if ((iteration>=0)&&(iteration<d->m_estimated_relative_errors.count()))
fberrorestimator.cpp:		return d->m_estimated_relative_errors[iteration];
fberrorestimator.cpp:	return d->m_stress_records.value(iteration);
fbsparsearray1d.cpp:	q->allocate(X.d->m_data_type,X.d->m_N);
fbsparsearray1d.cpp:	d->q=this;
fbsparsearray1d.cpp:	d->m_N=0;
fbsparsearray1d.cpp:	d->m_data_type=DATA_TYPE_FLOAT;
fbsparsearray1d.cpp:	d->m_stage=SPARSE_STAGE_EMPTY;
fbsparsearray1d.cpp:	d->m_data_byte=0;
fbsparsearray1d.cpp:	d->m_data_float=0;
fbsparsearray1d.cpp:	d->m_offsets=0;
fbsparsearray1d.cpp:	d->m_block_indices=0;
fbsparsearray1d.cpp:	d->m_block_entry_counts=0;
fbsparsearray1d.cpp:	d->m_entry_count=0;
fbsparsearray1d.cpp:	d->m_block_count=0;
fbsparsearray1d.cpp:	d->m_has_error=false;
fbsparsearray1d.cpp:	d->m_current_block_index=0;
fbsparsearray1d.cpp:	d->m_current_index_in_block=0;
fbsparsearray1d.cpp:	d->q=this;
fbsparsearray1d.cpp:	d->m_N=0;
fbsparsearray1d.cpp:	d->m_data_type=DATA_TYPE_FLOAT;
fbsparsearray1d.cpp:	d->m_stage=SPARSE_STAGE_EMPTY;
fbsparsearray1d.cpp:	d->m_data_byte=0;
fbsparsearray1d.cpp:	d->m_data_float=0;
fbsparsearray1d.cpp:	d->m_offsets=0;
fbsparsearray1d.cpp:	d->m_block_indices=0;
fbsparsearray1d.cpp:	d->m_block_entry_counts=0;
fbsparsearray1d.cpp:	d->m_entry_count=0;
fbsparsearray1d.cpp:	d->m_block_count=0;
fbsparsearray1d.cpp:	d->m_has_error=false;
fbsparsearray1d.cpp:	d->m_current_block_index=0;
fbsparsearray1d.cpp:	d->m_current_index_in_block=0;
fbsparsearray1d.cpp:	d->copy_from(X);
fbsparsearray1d.cpp:	if (d->m_data_byte) free(d->m_data_byte); d->m_data_byte=0;
fbsparsearray1d.cpp:	if (d->m_data_float) free(d->m_data_float); d->m_data_float=0;
fbsparsearray1d.cpp:	if (d->m_offsets) free(d->m_offsets); d->m_offsets=0;
fbsparsearray1d.cpp:	if (d->m_block_indices) free(d->m_block_indices); d->m_block_indices=0;
fbsparsearray1d.cpp:	if (d->m_block_entry_counts) free(d->m_block_entry_counts); d->m_block_entry_counts=0;
fbsparsearray1d.cpp:	d->m_stage=SPARSE_STAGE_EMPTY;
fbsparsearray1d.cpp:	d->m_data_type=DATA_TYPE_FLOAT;
fbsparsearray1d.cpp:	d->m_N=0;
fbsparsearray1d.cpp:	d->m_block_count=0;
fbsparsearray1d.cpp:	d->m_entry_count=0;
fbsparsearray1d.cpp:	d->m_has_error=false;
fbsparsearray1d.cpp:	d->m_N=N;
fbsparsearray1d.cpp:	d->m_block_count=N/SPARSE_BLOCK_SIZE+1;
fbsparsearray1d.cpp:	d->m_data_type=data_type;
fbsparsearray1d.cpp:	d->m_block_indices=(long *)malloc(sizeof(long)*d->m_block_count);
fbsparsearray1d.cpp:	d->m_block_entry_counts=(unsigned char *)malloc(sizeof(unsigned char)*d->m_block_count);
fbsparsearray1d.cpp:	for (long i=0; i<d->m_block_count; i++) {
fbsparsearray1d.cpp:		d->m_block_indices[i]=0;
fbsparsearray1d.cpp:		d->m_block_entry_counts[i]=0;
fbsparsearray1d.cpp:	d->m_stage=SPARSE_STAGE_ALLOCATED;
fbsparsearray1d.cpp:	if (d->m_has_error) return false;
fbsparsearray1d.cpp:	if ((ind>=d->m_N)||(ind<0)) {
fbsparsearray1d.cpp:		qWarning() << "problem in setupIndex: index out of range" << ind << d->m_N;
fbsparsearray1d.cpp:		if (d->m_stage!=SPARSE_STAGE_ALLOCATED) {
fbsparsearray1d.cpp:			d->m_has_error=true;
fbsparsearray1d.cpp:		d->m_block_entry_counts[block_num]++;
fbsparsearray1d.cpp:		if (d->m_stage==SPARSE_STAGE_ALLOCATED)
fbsparsearray1d.cpp:			d->finalize_step_1();
fbsparsearray1d.cpp:		if (d->m_stage!=SPARSE_STAGE_STEP1) {
fbsparsearray1d.cpp:			d->m_has_error=true;
fbsparsearray1d.cpp:		if (ind<=d->m_last_step2_index) {
fbsparsearray1d.cpp:			qWarning() << "Incorrect call to FBSparseArray1D::setupIndex() (pass=2). Index out of order:" << d->m_last_step2_index << ind;
fbsparsearray1d.cpp:			d->m_has_error=true;
fbsparsearray1d.cpp:		long last_block_index=d->m_last_step2_index/SPARSE_BLOCK_SIZE;
fbsparsearray1d.cpp:		if (d->m_last_step2_index<0) last_block_index=-1;
fbsparsearray1d.cpp:		if (block_index==last_block_index) index_in_block=d->m_last_step2_index_in_block+1;
fbsparsearray1d.cpp:		if (index_in_block>=d->m_block_entry_counts[block_index]) {
fbsparsearray1d.cpp:			qWarning() << "Incorrect call to FBSparseArray1D::setupIndex2() (pass=2). Index in block is too large." << index_in_block << d->m_block_entry_counts[block_index] << block_index;
fbsparsearray1d.cpp:			d->m_has_error=true;
fbsparsearray1d.cpp:		d->m_offsets[d->m_block_indices[block_index]+index_in_block]=ind%SPARSE_BLOCK_SIZE;
fbsparsearray1d.cpp:		d->m_last_step2_index=ind;
fbsparsearray1d.cpp:		d->m_last_step2_index_in_block=index_in_block;
fbsparsearray1d.cpp:		d->m_has_error=true;
fbsparsearray1d.cpp:	if (d->m_has_error) return 0;
fbsparsearray1d.cpp:	return d->m_N;
fbsparsearray1d.cpp:	if (d->m_has_error) return;
fbsparsearray1d.cpp:	if (d->m_stage==SPARSE_STAGE_STEP1) d->finalize_step_2();
fbsparsearray1d.cpp:	if (d->m_stage!=SPARSE_STAGE_STEP2) {
fbsparsearray1d.cpp:		d->m_has_error=true;
fbsparsearray1d.cpp:	int offset_index=d->find_offset_index(blockind,ind%SPARSE_BLOCK_SIZE);
fbsparsearray1d.cpp:		d->m_has_error=true;
fbsparsearray1d.cpp:	if (d->m_data_type==DATA_TYPE_FLOAT)
fbsparsearray1d.cpp:		d->m_data_float[d->m_block_indices[blockind]+offset_index]=val;
fbsparsearray1d.cpp:	else if (d->m_data_type==DATA_TYPE_BYTE)
fbsparsearray1d.cpp:		d->m_data_byte[d->m_block_indices[blockind]+offset_index]=(unsigned char)val;
fbsparsearray1d.cpp:	if (d->m_has_error) return 0;
fbsparsearray1d.cpp:	if ((ind<0)||(ind>=d->m_N)) return 0;
fbsparsearray1d.cpp:	if (d->m_stage==SPARSE_STAGE_STEP1) d->finalize_step_2();
fbsparsearray1d.cpp:	if (d->m_stage!=SPARSE_STAGE_STEP2) {
fbsparsearray1d.cpp:		d->m_has_error=true;
fbsparsearray1d.cpp:	int offset_index=d->find_offset_index(blockind,ind%SPARSE_BLOCK_SIZE);
fbsparsearray1d.cpp:	if (d->m_data_type==DATA_TYPE_FLOAT)
fbsparsearray1d.cpp:		return d->m_data_float[d->m_block_indices[blockind]+offset_index];
fbsparsearray1d.cpp:	else if (d->m_data_type==DATA_TYPE_BYTE)
fbsparsearray1d.cpp:		return d->m_data_byte[d->m_block_indices[blockind]+offset_index];
fbsparsearray1d.cpp:	if (d->m_has_error) return 0;
fbsparsearray1d.cpp:	return d->m_entry_count;
fbsparsearray1d.cpp:	d->m_current_block_index=-1;
fbsparsearray1d.cpp:	d->m_current_index_in_block=-1;
fbsparsearray1d.cpp:	if (d->m_current_block_index<0) {
fbsparsearray1d.cpp:		d->m_current_block_index=0;
fbsparsearray1d.cpp:		d->m_current_index_in_block=0;
fbsparsearray1d.cpp:		if (d->m_current_block_index>=d->m_block_count) return false;
fbsparsearray1d.cpp:		while (d->m_current_index_in_block>=d->m_block_entry_counts[d->m_current_block_index]) {
fbsparsearray1d.cpp:			d->m_current_block_index++;
fbsparsearray1d.cpp:			if (d->m_current_block_index>=d->m_block_count) return false;
fbsparsearray1d.cpp:		if (d->m_current_block_index>=d->m_block_count) return false;
fbsparsearray1d.cpp:		d->m_current_index_in_block++;
fbsparsearray1d.cpp:		while (d->m_current_index_in_block>=d->m_block_entry_counts[d->m_current_block_index]) {
fbsparsearray1d.cpp:			d->m_current_block_index++;
fbsparsearray1d.cpp:			d->m_current_index_in_block=0;
fbsparsearray1d.cpp:			if (d->m_current_block_index>=d->m_block_count) return false;	
fbsparsearray1d.cpp:	if (d->m_current_block_index<0) return -1;
fbsparsearray1d.cpp:	return d->m_current_block_index*SPARSE_BLOCK_SIZE+d->m_offsets[d->m_block_indices[d->m_current_block_index]+d->m_current_index_in_block];
fbsparsearray1d.cpp:	if (d->m_data_type==DATA_TYPE_FLOAT)
fbsparsearray1d.cpp:		return d->m_data_float[d->m_block_indices[d->m_current_block_index]+d->m_current_index_in_block];
fbsparsearray1d.cpp:	else if (d->m_data_type==DATA_TYPE_BYTE)
fbsparsearray1d.cpp:		return d->m_data_byte[d->m_block_indices[d->m_current_block_index]+d->m_current_index_in_block];
fbsparsearray1d.cpp:	d->copy_from(X);
fbsparsearray4d.cpp:	m_N1=X.d->m_N1;
fbsparsearray4d.cpp:	m_N2=X.d->m_N2;
fbsparsearray4d.cpp:	m_N3=X.d->m_N3;
fbsparsearray4d.cpp:	m_N4=X.d->m_N4;
fbsparsearray4d.cpp:	m_N1N2=X.d->m_N1N2;
fbsparsearray4d.cpp:	m_N1N2N3=X.d->m_N1N2N3;
fbsparsearray4d.cpp:	m_N1N2N3N4=X.d->m_N1N2N3N4;
fbsparsearray4d.cpp:	m_data=X.d->m_data;
fbsparsearray4d.cpp:	d->q=this;
fbsparsearray4d.cpp:	d->m_N1=d->m_N2=d->m_N3=d->m_N4=0;
fbsparsearray4d.cpp:	d->m_N1N2=d->m_N1N2N3=d->m_N1N2N3N4=0;
fbsparsearray4d.cpp:	d->q=this;
fbsparsearray4d.cpp:	d->m_N1=d->m_N2=d->m_N3=d->m_N4=0;
fbsparsearray4d.cpp:	d->m_N1N2=d->m_N1N2N3=d->m_N1N2N3N4=0;
fbsparsearray4d.cpp:	d->copy_from(X);	
fbsparsearray4d.cpp:	d->copy_from(X);
fbsparsearray4d.cpp:	d->m_data.allocate(data_type,N1*N2*N3*N4);
fbsparsearray4d.cpp:	d->m_N1=N1; d->m_N2=N2; d->m_N3=N3; d->m_N4=N4;
fbsparsearray4d.cpp:	d->m_N1N2=N1*N2; d->m_N1N2N3=N1*N2*N3; d->m_N1N2N3N4=N1*N2*N3*N4;
fbsparsearray4d.cpp:	if ((i1<0)||(i1>=d->m_N1)) return;
fbsparsearray4d.cpp:	if ((i2<0)||(i2>=d->m_N2)) return;
fbsparsearray4d.cpp:	if ((i3<0)||(i3>=d->m_N3)) return;
fbsparsearray4d.cpp:	if ((i4<0)||(i4>=d->m_N4)) return;
fbsparsearray4d.cpp:	d->m_data.setValue(val,i1+d->m_N1*i2+d->m_N1N2*i3+d->m_N1N2N3*i4);
fbsparsearray4d.cpp:	if ((i1<0)||(i1>=d->m_N1)) return 0;
fbsparsearray4d.cpp:	if ((i2<0)||(i2>=d->m_N2)) return 0;
fbsparsearray4d.cpp:	if ((i3<0)||(i3>=d->m_N3)) return 0;
fbsparsearray4d.cpp:	if ((i4<0)||(i4>=d->m_N4)) return 0;
fbsparsearray4d.cpp:	return d->m_data.value(i1+d->m_N1*i2+d->m_N1N2*i3+d->m_N1N2N3*i4);
fbsparsearray4d.cpp:	return d->m_data.value(i);
fbsparsearray4d.cpp:	return d->m_N1;
fbsparsearray4d.cpp:	return d->m_N2;
fbsparsearray4d.cpp:	return d->m_N3;
fbsparsearray4d.cpp:	return d->m_N4;
fbsparsearray4d.cpp:	d->m_current_i1=d->m_current_i2=d->m_current_i3=d->m_current_i4=-1;
fbsparsearray4d.cpp:	d->m_data.resetIteration();
fbsparsearray4d.cpp:	if (!d->m_data.entryCount()) return false;
fbsparsearray4d.cpp:	if (!d->m_N1N2N3N4) return false;
fbsparsearray4d.cpp:	long oldind=d->m_data.currentIndex();
fbsparsearray4d.cpp:	if (!d->m_data.advanceIteration()) return false;
fbsparsearray4d.cpp:	long newind=d->m_data.currentIndex();
fbsparsearray4d.cpp:		d->m_current_i1=newind%d->m_N1;
fbsparsearray4d.cpp:		d->m_current_i2=(newind/d->m_N1)%d->m_N2;
fbsparsearray4d.cpp:		d->m_current_i3=(newind/d->m_N1N2)%d->m_N3;
fbsparsearray4d.cpp:		d->m_current_i4=(newind/d->m_N1N2N3)%d->m_N4;
fbsparsearray4d.cpp:		long diffind=newind-oldind;
fbsparsearray4d.cpp:		d->m_current_i1+=diffind;
fbsparsearray4d.cpp:		if (d->m_current_i1>=d->m_N1) {
fbsparsearray4d.cpp:			while (d->m_current_i1>=d->m_N1) {
fbsparsearray4d.cpp:				d->m_current_i1-=d->m_N1;
fbsparsearray4d.cpp:				d->m_current_i2++;
fbsparsearray4d.cpp:		if (d->m_current_i2>=d->m_N2) {
fbsparsearray4d.cpp:			while (d->m_current_i2>=d->m_N2) {
fbsparsearray4d.cpp:				d->m_current_i2-=d->m_N2;
fbsparsearray4d.cpp:				d->m_current_i3++;
fbsparsearray4d.cpp:		if (d->m_current_i3>=d->m_N3) {
fbsparsearray4d.cpp:			while (d->m_current_i3>=d->m_N3) {
fbsparsearray4d.cpp:				d->m_current_i3-=d->m_N3;
fbsparsearray4d.cpp:				d->m_current_i4++;
fbsparsearray4d.cpp:		if (d->m_current_i4>=d->m_N4) {
fbsparsearray4d.cpp:	return d->m_current_i1;
fbsparsearray4d.cpp:	return d->m_current_i2;
fbsparsearray4d.cpp:	return d->m_current_i3;
fbsparsearray4d.cpp:	return d->m_current_i4;
fbsparsearray4d.cpp:	return d->m_data.currentValue();
fbsparsearray4d.cpp:	return d->m_data.setupIndex(pass,i1+d->m_N1*i2+d->m_N1N2*i3+d->m_N1N2N3*i4);
fbtimer.cpp:	d->q=this;
fbtimer.cpp:	if (!dd->m_timers.contains(timer_name)) {
fbtimer.cpp:		dd->m_timers[timer_name]=TD;
fbtimer.cpp:	dd->m_timers[timer_name].time.start();
fbtimer.cpp:	if (!dd->m_timers.contains(timer_name)) return;
fbtimer.cpp:	dd->m_timers[timer_name].ms_elapsed+=dd->m_timers[timer_name].time.restart();
fbtimer.cpp:	if (!dd->m_timers.contains(timer_name)) return 0;
fbtimer.cpp:	return dd->m_timers[timer_name].ms_elapsed/1000.0;
fbtimer.cpp:	QStringList ret=dd->m_timers.keys();
